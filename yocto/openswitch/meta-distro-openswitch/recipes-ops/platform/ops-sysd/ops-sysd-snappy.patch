diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3f3e8c5..88fe058 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -75,14 +82,9 @@ target_link_libraries (${SYSD} ${OPSUTILS_LIBRARIES} ${CONFIG_YAML_LIBRARIES}
                        ${OVSCOMMON_LIBRARIES} ${OVSDB_LIBRARIES} ${ZLIB_LIBRARIES}
                        -lpthread -lrt -lsupportability -lyaml)
 
-# The default install prefix is /usr. We want to install manifest file at
-# '/etc/openswitch'. So change the install prefix to '/', and use relative
-# directories in the install command.
-SET(CMAKE_INSTALL_PREFIX "/" CACHE STRING "Prefix prepended to install directories" FORCE)
-
 # Rules to install ops-sysd binary in rootfs
 install(TARGETS ${SYSD}
-        RUNTIME DESTINATION usr/bin)
+        RUNTIME DESTINATION /usr/bin)
 
 # Build ops-sysd cli shared libraries.
 add_subdirectory(src/cli)
@@ -90,4 +92,4 @@ add_subdirectory(src/cli)
 # OPS_TODO: The image.manifest file should not be located in sysd.
 # This is just temporary parking space until we find it better home.
 install(FILES files/image.manifest
-        DESTINATION etc/openswitch)
+        DESTINATION /etc/openswitch)
diff --git a/src/sysd.c b/src/sysd.c
index e7ac123..83c4d36 100644
--- a/src/sysd.c
+++ b/src/sysd.c
@@ -62,6 +62,7 @@ int              num_subsystems = 0;
 sysd_subsystem_t **subsystems = NULL;
 
 char *g_hw_desc_dir = "/";
+char *g_hw_desc_link = "/";
 
 daemon_info_t **daemons = NULL;
 int num_daemons = 0;
diff --git a/src/sysd_fru.c b/src/sysd_fru.c
index 39c75bc..850117d 100644
--- a/src/sysd_fru.c
+++ b/src/sysd_fru.c
@@ -39,6 +39,14 @@
 
 #include "eventlog.h"
 
+/*
+ * Used to populate FRU fields not supplied by the 
+ * manufacturer.
+ */
+#define SYSD_UNKNOWN "Unknown"
+#define SYSD_UNKNOWN_1 "?"
+#define SYSD_UNKNOWN_2 SYSD_UNKNOWN_1 SYSD_UNKNOWN_1
+
 VLOG_DEFINE_THIS_MODULE(fru);
 
 /** @ingroup sysd
@@ -186,6 +194,78 @@ sysd_process_eeprom(unsigned char *buf, fru_eeprom_t *fru_eeprom, int len)
         buf += skip;
     }
 
+    /*
+     * Required fields that MUST be found EEPROM.
+     */
+    if ((fru_eeprom->num_macs == 0) ||
+        ((fru_eeprom->base_mac_address[0] == 0) &&
+         (fru_eeprom->base_mac_address[1] == 0) &&
+         (fru_eeprom->base_mac_address[2] == 0) &&
+         (fru_eeprom->base_mac_address[3] == 0) &&
+         (fru_eeprom->base_mac_address[4] == 0) &&
+         (fru_eeprom->base_mac_address[5] == 0)))
+    {
+        VLOG_ERR("MAC Address info not found in FRU EEPROM.");
+        return (false);
+    }
+
+    /* Fill in missing fields with some reasonable values if needed. */
+    if (!strlen(fru_eeprom->country_code)) {
+        strcpy(fru_eeprom->country_code, SYSD_UNKNOWN_2);
+        VLOG_WARN("Country code not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN_2);
+    }
+    if (!fru_eeprom->diag_version) {
+        fru_eeprom->diag_version = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Diag version not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->label_revision) {
+        fru_eeprom->label_revision = strdup(SYSD_UNKNOWN_1);
+        VLOG_WARN("Label version not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN_1);
+    }
+    if (!strlen(fru_eeprom->manufacture_date)) {
+        strcpy(fru_eeprom->manufacture_date, SYSD_UNKNOWN);
+        VLOG_WARN("Manufacture date not found in FRU EEPROM. Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->manufacturer) {
+        fru_eeprom->manufacturer = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Manufacturer not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->onie_version) {
+        fru_eeprom->onie_version = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("ONIE version not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->part_number) {
+        fru_eeprom->part_number = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Part Number not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->platform_name) {
+        fru_eeprom->platform_name = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Platform Name not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->product_name) {
+        fru_eeprom->product_name = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Product Name not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->serial_number) {
+        fru_eeprom->serial_number = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Serial Number not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+    if (!fru_eeprom->vendor) {
+        fru_eeprom->vendor = strdup(SYSD_UNKNOWN);
+        VLOG_WARN("Vendor not found in FRU EEPROM.  Using \"%s\".",
+                  SYSD_UNKNOWN);
+    }
+
     return (true);
 } /* sysd_process_eeprom() */
 
diff --git a/src/sysd_ovsdb_if.c b/src/sysd_ovsdb_if.c
index 0b56198..9ed0be2 100644
--- a/src/sysd_ovsdb_if.c
+++ b/src/sysd_ovsdb_if.c
@@ -58,6 +58,7 @@ VLOG_DEFINE_THIS_MODULE(ovsdb_if);
  * @{ */
 #define PKG_INFO_ENTRIES_PER_COMMIT 2000
 #define REM_BUF_LEN (buflen - 1 - strlen(buf))
+#define SYSD_POLL_INTERVAL 100
 
 enum {
     VALUE,
@@ -451,6 +452,12 @@ sysd_add_package_info()
     struct ovsrec_package_info *row  = NULL;
     struct ovsdb_idl_txn       *txn  = NULL;
     enum ovsdb_idl_txn_status  txn_status = TXN_ERROR;
+    char version_path[1024];
+    char *install_rootdir;
+
+    install_rootdir = (getenv("OPENSWITCH_INSTALL_PATH") ? getenv("OPENSWITCH_INSTALL_PATH") : "");
+    snprintf(version_path, sizeof(version_path), "%s%s",
+             install_rootdir, VERSION_DETAIL_FILE_PATH);
 
     /* Initialize parser */
     if (!yaml_parser_initialize(&parser)) {
@@ -459,9 +466,9 @@ sysd_add_package_info()
     }
 
     /* Open /var/lib/version_detail.yaml file */
-    fh = fopen(VERSION_DETAIL_FILE_PATH, "r");
+    fh = fopen(version_path, "r");
     if (NULL == fh) {
-        VLOG_ERR("Failed to open file %s\n",VERSION_DETAIL_FILE_PATH);
+        VLOG_ERR("Failed to open file %s\n",version_path);
         yaml_parser_delete(&parser);
         return;
     }
@@ -602,9 +609,12 @@ sysd_update_sw_info(const struct ovsrec_system *cfg)
     char   build_str[NSTR];
     size_t line_len = 0;
     int i;
+    char   rel_path[256];
 
     /* Open os-release file with the os version information */
-    os_ver_fp = fopen(OS_RELEASE_FILE_PATH, "r");
+    snprintf(rel_path, sizeof(rel_path), "%s" OS_RELEASE_FILE_PATH,
+             (getenv("OPENSWITCH_INSTALL_PATH") ? getenv("OPENSWITCH_INSTALL_PATH") : ""));
+    os_ver_fp = fopen(rel_path, "r");
     if (NULL == os_ver_fp) {
         VLOG_ERR("Unable to find system OS release. File %s was not found",
                  OS_RELEASE_FILE_PATH);
@@ -1030,6 +1040,6 @@ void
 sysd_wait(void)
 {
     ovsdb_idl_wait(idl);
-
+    poll_timer_wait(SYSD_POLL_INTERVAL);
 } /* sysd_wait */
 /** @} end of group sysd */
diff --git a/src/sysd_util.c b/src/sysd_util.c
index 70651c8..8056174 100644
--- a/src/sysd_util.c
+++ b/src/sysd_util.c
@@ -147,38 +155,45 @@ get_manuf_and_prodname(char *cmd_path, char **manufacturer, char **product_name)
 static int
 create_link_to_desc_files(char *manufacturer, char *product_name)
 {
-    char        hw_desc_dir[1024];
+    char        path[1024];
     int         rc = 0;
     struct stat sbuf;
     extern char *g_hw_desc_dir;
+    extern char *g_hw_desc_link;
+    char        *install_rootdir;
+    char        *data_rootdir;
 
-    snprintf(hw_desc_dir, sizeof(hw_desc_dir), "%s/%s/%s",
-             HWDESC_FILES_PATH, manufacturer, product_name);
+    install_rootdir = (getenv("OPENSWITCH_INSTALL_PATH") ? getenv("OPENSWITCH_INSTALL_PATH") : "");
+    data_rootdir = (getenv("OPENSWITCH_DATA_PATH") ? getenv("OPENSWITCH_DATA_PATH") : "");
+    snprintf(path, sizeof(path), "%s%s/%s/%s",
+             install_rootdir, HWDESC_FILES_PATH, manufacturer, product_name);
 
-    VLOG_INFO("Location to HW descrptor files: %s", hw_desc_dir);
+    VLOG_INFO("Location to HW descrptor files: %s", path);
 
-    g_hw_desc_dir = strdup(hw_desc_dir);
+    g_hw_desc_dir = strdup(path);
 
-    if (stat(hw_desc_dir, &sbuf) != 0) {
-        VLOG_ERR("Unable to find hardware description files at %s", hw_desc_dir);
+    if (stat(g_hw_desc_dir, &sbuf) != 0) {
+        VLOG_ERR("Unable to find hardware description files at %s", g_hw_desc_dir);
         return -1;
     }
 
     /* Remove old link if it exists */
-    remove(HWDESC_FILE_LINK);
+    snprintf(path, sizeof(path), "%s%s", data_rootdir, HWDESC_FILE_LINK);
+    g_hw_desc_link = strdup(path);
+    remove(g_hw_desc_link);
 
     /* mkdir for the new link */
-    rc = mkdir(HWDESC_FILE_LINK_PATH, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
+    snprintf(path, sizeof(path), "%s%s", data_rootdir, HWDESC_FILE_LINK_PATH);
+    rc = mkdir(path, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
     if (rc == -1 && errno != EEXIST) {
-        VLOG_ERR("Failed to create %s, Error %s",
-                 HWDESC_FILE_LINK_PATH, ovs_strerror(errno));
+        VLOG_ERR("Failed to create %s, Error %s", path, ovs_strerror(errno));
         return -1;
     }
 
     /* Create link to these files */
-    if (-1 == symlink(hw_desc_dir, HWDESC_FILE_LINK)) {
+    if (-1 == symlink(g_hw_desc_dir, g_hw_desc_link)) {
         VLOG_ERR("Unable to create  soft link to %s -> %s. Error %s",
-                 HWDESC_FILE_LINK, hw_desc_dir, ovs_strerror(errno));
+                 g_hw_desc_link, g_hw_desc_dir, ovs_strerror(errno));
         return -1;
     }
 
@@ -451,7 +466,13 @@ sysd_set_num_hw_daemons()
 int
 sysd_read_manifest_file(void)
 {
-    manifest_info = json_from_file(IMAGE_MANIFEST_FILE_PATH);
+    char image_manifest_path[1024];
+    char *install_rootdir;
+
+    install_rootdir = (getenv("OPENSWITCH_INSTALL_PATH") ? getenv("OPENSWITCH_INSTALL_PATH") : "");
+    snprintf(image_manifest_path, sizeof(image_manifest_path), "%s%s",
+             install_rootdir, IMAGE_MANIFEST_FILE_PATH);
+    manifest_info = json_from_file(image_manifest_path);
 
     if (manifest_info == (struct json *) NULL) {
         return -1;
